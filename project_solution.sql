USE ECOMMERCE;

-- NO 1 
SELECT E.EMPLOYEEID, CONCAT( E.FIRSTNAME , " " , E.LASTNAME) AS EMPLOYEE_NAME,  
concat("$",ROUND(SUM((D.UNITPRICE *  D.QUANTITY)*(1 - D.DISCOUNT))*1.08, 3)) AS TOTAL_SALES
FROM EMPLOYEES E
INNER JOIN ORDERS O
ON E.EMPLOYEEID =  O.EMPLOYEEID
INNER JOIN ORDERDETAILS D
ON O.ORDERID = D.ORDERID
GROUP BY E.EMPLOYEEID ;

-- NO 2
SELECT C.CUSTOMERNAME, ROUND(SUM((D.UNITPRICE *  D.QUANTITY)*(1 - D.DISCOUNT )),2) AS TOTAL_AMOUNT_SPENT
FROM ORDERS O
INNER JOIN CUSTOMERS C 
ON O.CUSTOMERID = C.CUSTOMERID
INNER JOIN ORDERDETAILS D
ON O.ORDERID = D.ORDERID
GROUP BY C.CUSTOMERID
ORDER BY TOTAL_AMOUNT_SPENT DESC
LIMIT 5;


-- NO 3 
WITH CTE AS (
SELECT ORDERID, MONTHNAME(ORDERDATE) AS MONTH, YEAR(ORDERDATE) AS YEAR
FROM ORDERS)
SELECT CTE.YEAR,CTE.MONTH, ROUND(SUM((D.UNITPRICE * D.QUANTITY) *(1 - D.DISCOUNT)),3) AS TOTAL_SALES
FROM CTE
INNER JOIN  ORDERDETAILS D
ON CTE.ORDERID = D.ORDERID
WHERE CTE.YEAR = 1997
GROUP BY CTE.MONTH ;

-- NO 4 
SELECT 
    E.EMPLOYEEID,
    CONCAT(E.LASTNAME, " ", E.FIRSTNAME) AS EMPLOYEENAME,
    ROUND(AVG(
        CASE 
            WHEN YEAR(O.ORDERDATE) = 1996 THEN 3
            WHEN YEAR(O.ORDERDATE) = 1997 THEN 5
            ELSE 0
        END
    ),2) AS AVG_FULFILLMENT_DAYS
FROM EMPLOYEES E
JOIN ORDERS O ON E.EMPLOYEEID = O.EMPLOYEEID
WHERE YEAR(O.ORDERDATE) IN (1996, 1997)
GROUP BY E.EMPLOYEEID, EMPLOYEENAME;

-- NO 5
SELECT C.CUSTOMERNAME, ROUND(SUM((D.UNITPRICE * D.QUANTITY) *(1-D.DISCOUNT)),2) AS TOTAL_SALES, C.CITY
FROM CUSTOMERS C
INNER JOIN ORDERS O
ON C.CUSTOMERID = O.CUSTOMERID
INNER JOIN ORDERDETAILS D
ON O.ORDERID = D.ORDERID
WHERE CITY = "LONDON"
GROUP BY C.CUSTOMERNAME, C.CITY;

-- NO 6
SELECT C.CUSTOMERNAME, O.ORDERDATE, COUNT(O.ORDERID) AS ORDERCOUNT
FROM CUSTOMERS C
INNER JOIN ORDERS O
ON C.CUSTOMERID = O.CUSTOMERID
GROUP BY C.CUSTOMERNAME, O.ORDERDATE
HAVING COUNT(O.ORDERID) > 1;

-- NO 7
SELECT P.PRODUCTNAME , ROUND(AVG(D.DISCOUNT) ,2) AS AVG_DISCOUNT
FROM ORDERDETAILS D
INNER JOIN PRODUCTS P
ON P.PRODUCTID = D.PRODUCTID
GROUP BY PRODUCTNAME;

-- NO 8
SELECT CUSTOMERNAME , PRODUCTNAME, SUM(D.QUANTITY) AS TOTAL_QUANTITY
FROM CUSTOMERS C
INNER JOIN ORDERS O
ON C.CUSTOMERID = O.CUSTOMERID
INNER JOIN ORDERDETAILS D
ON O.ORDERID = D.ORDERID
INNER JOIN PRODUCTS P
ON D.PRODUCTID = P.PRODUCTID
GROUP BY PRODUCTNAME, CUSTOMERNAME;

-- NO 9
WITH CTE AS 
(SELECT 
    E.EMPLOYEEID, 
    E.LASTNAME, 
    E.FIRSTNAME, 
    ROUND(SUM((D.QUANTITY * D.UNITPRICE)*(1-D.DISCOUNT)),2) AS TOTAL_SALES 
  FROM EMPLOYEES E
  INNER JOIN ORDERS O ON E.EMPLOYEEID = O.EMPLOYEEID
  INNER JOIN ORDERDETAILS D ON O.ORDERID = D.ORDERID
  GROUP BY E.EMPLOYEEID, E.LASTNAME, E.FIRSTNAME
)
SELECT CONCAT(LASTNAME, " ", FIRSTNAME) AS EMPLOYEENAME , TOTAL_SALES, RANK() OVER( ORDER BY TOTAL_SALES DESC) AS RANK_SALES
FROM CTE
ORDER BY RANK_SALES;

-- NO 10 
SELECT  C.COUNTRY, G.CATEGORYNAME, ROUND(SUM((D.QUANTITY * D.UNITPRICE)*(1- DISCOUNT)),2) AS TOTAL_SALES 
FROM CUSTOMERS C
INNER JOIN ORDERS O
ON C.CUSTOMERID = O.CUSTOMERID
INNER JOIN ORDERDETAILS D
ON O.ORDERID =  D.ORDERID
INNER JOIN PRODUCTS P 
ON D.PRODUCTID = P.PRODUCTID
INNER JOIN CATEGORIES G
ON P.CATEGORYID = G.CATEGORYID
GROUP BY C.COUNTRY, G.CATEGORYNAME
ORDER BY C.COUNTRY, G.CATEGORYNAME;

-- NO 11

-- WITH YEARSALES AS
WITH YEARSALES AS 
(
 SELECT YEAR(O.ORDERDATE) AS YEAR,ROUND(SUM((D.QUANTITY * D.UNITPRICE)*(1-D.DISCOUNT)),2) AS TOTALSALES,D.PRODUCTID
 FROM ORDERDETAILS D
 INNER JOIN ORDERS O ON D.ORDERID = O.ORDERID
 GROUP BY D.PRODUCTID , YEAR
)
SELECT Y1.PRODUCTID, P.PRODUCTNAME, Y1.YEAR AS CURRENT_YEAR , Y0.YEAR AS PREVIOUSYEAR, Y1.TOTALSALES AS TOTALSALES_CURRENTYEAR, Y0.TOTALSALES AS TOTALSALES_PREVIOUSYEAR,
ROUND((((Y1.TOTALSALES - Y0.TOTALSALES) / Y0.TOTALSALES)*100),2) AS PERCENTAGE_SALES
FROM YEARSALES Y1
INNER JOIN YEARSALES Y0
ON Y1.YEAR = Y0.YEAR + 1 AND
Y1.PRODUCTID = Y0.PRODUCTID
INNER JOIN PRODUCTS P
ON Y1.PRODUCTID = P.PRODUCTID
ORDER BY Y1.PRODUCTID;

-- NO 12 
WITH OrderTotals AS (
  SELECT 
    O.ORDERID,
    SUM(D.QUANTITY) AS TOTAL_QUANTITY
  FROM ORDERDETAILS D
  JOIN ORDERS O ON D.ORDERID = O.ORDERID
  GROUP BY O.ORDERID
)
SELECT 
  ORDERID,
  TOTAL_QUANTITY,
  ROUND(PERCENT_RANK() OVER (ORDER BY TOTAL_QUANTITY), 3) AS QUANTITY_PERCENTILE
FROM OrderTotals;

-- NO 13
SELECT P.PRODUCTID, P.PRODUCTNAME, COUNT(D.PRODUCTID) AS NUMBER_OF_ORDER
FROM ORDERDETAILS D
INNER JOIN PRODUCTS P
ON D.PRODUCTID = P.PRODUCTID
GROUP BY D.PRODUCTID
HAVING NUMBER_OF_ORDER = 1;

-- NO 14
WITH CTE AS (
SELECT P.PRODUCTID, P.PRODUCTNAME , ROUND(SUM((D.UNITPRICE * D.QUANTITY)*(1-D.DISCOUNT)),2) AS TOTAL_REVENUE , 
C.CATEGORYID,C.CATEGORYNAME,
 RANK() OVER (PARTITION BY C.CATEGORYID ORDER BY ROUND(SUM((D.QUANTITY * D.UNITPRICE)*(1-D.DISCOUNT)),2) DESC) AS REV_RANK
FROM ORDERDETAILS D
INNER JOIN PRODUCTS P
INNER JOIN CATEGORIES C
ON P.CATEGORYID = C.CATEGORYID
ON D.PRODUCTID = P.PRODUCTID
GROUP BY  P.PRODUCTID, P.PRODUCTNAME, C.CATEGORYID, C.CATEGORYNAME
)
SELECT CATEGORYNAME, PRODUCTNAME, TOTAL_REVENUE 
FROM CTE
WHERE REV_RANK =1;


 
-- NO 15
WITH OrderTotals AS (
  SELECT 
    O.ORDERID,
    ROUND(SUM((D.UNITPRICE * D.QUANTITY)*(1 - D.DISCOUNT)),2) AS TOTAL_PRICE,
    MAX(CASE WHEN D.DISCOUNT >= 0.05 THEN 1 ELSE 0 END) AS HAS_HIGH_DISCOUNT
  FROM ORDERS O
  JOIN ORDERDETAILS D ON O.ORDERID = D.ORDERID
  GROUP BY O.ORDERID
)
SELECT ORDERID , TOTAL_PRICE 
FROM OrderTotals 
WHERE TOTAL_PRICE > 100 AND HAS_HIGH_DISCOUNT = 1
GROUP BY ORDERID;